package main

import (
	"net/http"
	"scimta-be/db"
	"scimta-be/router"
	"strings"

	_ "scimta-be/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/labstack/gommon/log"
	echoSwagger "github.com/swaggo/echo-swagger" // echo-swagger middleware
)

// @title Swagger Example API
// @version 1.0
// @description Conduit API
// @title Conduit API

// @host localhost:8000
// @BasePath /api

// @schemes http https
// @produce	application/json
// @consumes application/json

// @in header
// @name Authorization

func main() {
	// Init Echo
	e := echo.New()
	e.Logger.SetLevel(log.DEBUG)
	e.Pre(middleware.RemoveTrailingSlash())
	e.Use(middleware.Logger())
	e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOrigins: []string{"*"},
		AllowHeaders: []string{echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept, echo.HeaderAuthorization},
		AllowMethods: []string{echo.GET, echo.HEAD, echo.PUT, echo.PATCH, echo.POST, echo.DELETE},
	}))
	e.Use(middleware.GzipWithConfig(middleware.GzipConfig{
		Skipper: func(c echo.Context) bool {
			return strings.Contains(c.Request().URL.Path, "docs")
		},
	}))

	e.GET("/", func(c echo.Context) error {
		return c.String(http.StatusOK, "Hello, World!")
	})

	e.GET("/docs/*", echoSwagger.WrapHandler)

	v1 := e.Group("/api")

	// Init DB
	d := db.New()

	// UserRouter
	router.NewUserRouter(v1)

	// Start server
	e.Logger.Fatal(e.Start("0.0.0.0:8000"))
}
